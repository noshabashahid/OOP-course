# lesson 1
Classes and Objects in OOP

What are Classes and Objects?

Classes and objects are the fundamental building blocks of Object-Oriented Programming (OOP).

Class: A class is a blueprint for creating objects. It defines the attributes (data members) and behaviors (methods) that its objects will have.

Object: An object is an instance of a class that contains actual values for the attributes and can use the methods defined in the class.

Example:

Think of a Car as a class, which defines characteristics like brand, model, and year. A specific car like a Toyota Corolla 2022 is an object created from that class.

Defining a Class in C++

A class is defined using the class keyword, followed by its name and a set of members (variables and functions).

Example of a Class:

#include <iostream>
using namespace std;

// Defining a class
class Car {
private:
    string brand;
    int year;

public:
    // Constructor
    Car(string b, int y) {
        brand = b;
        year = y;
    }

    // Method to display car details
    void display() {
        cout << "Brand: " << brand << "\n";
        cout << "Year: " << year << "\n";
    }
};

int main() {
    // Creating objects
    Car car1("Toyota", 2022);
    Car car2("Honda", 2023);

    // Calling methods
    car1.display();
    car2.display();
    
    return 0;
}

Explanation:

Car is a class that has two attributes: brand and year.

The constructor initializes these attributes when an object is created.

The display() method prints the car's details.

Inside main(), two objects (car1 and car2) are created and used.

Access Specifiers in Classes

Classes have access specifiers that control how members are accessed:

Private: Members are accessible only within the class (default access specifier in C++).

Public: Members can be accessed from outside the class.

Protected: Members are accessible within the class and its derived classes (used in inheritance).

Example:

class Example {
private:
    int privateVar;
public:
    int publicVar;
};

Here, privateVar is accessible only inside the class, while publicVar can be accessed from outside.

Creating and Using Objects

Once a class is defined, objects can be created and used in different ways:

Creating an Object:

Car myCar("Ford", 2021);

Accessing Members:

If a member is public, we can access it like this:

myCar.display();

If a member is private, we must use a public method inside the class to modify or access it.

Summary:

Classes define a blueprint; objects are instances of classes.

Attributes and methods define the behavior of objects.

Access specifiers control how class members are accessed.

Objects are created and manipulated using constructors and methods.
